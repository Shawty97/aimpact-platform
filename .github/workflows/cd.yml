name: CD - Deploy to Kubernetes

on:
  workflow_run:
    workflows: ["CI - Build, Test, and Scan"]
    branches: [main]
    types:
      - completed
  # Manual trigger for production deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (default is latest successful build)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/aimpact

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    
    steps:
      - name: Determine Environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          echo "Deploying to ${{ steps.environment.outputs.environment }}"
      
      - name: Determine Version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
          echo "Using version ${{ steps.version.outputs.version }}"

  deploy-staging:
    name: Deploy to Staging
    needs: prepare
    if: needs.prepare.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
          context: staging-cluster
      
      - name: Update Helm values
        run: |
          # Create values file with dynamic image tags
          cat > helm/values-staging.yaml << EOF
          images:
            backend: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ needs.prepare.outputs.version }}
            voice: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-voice:${{ needs.prepare.outputs.version }}
            workflowEngine: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-workflow-engine:${{ needs.prepare.outputs.version }}
            auth: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:${{ needs.prepare.outputs.version }}
          
          deployment:
            environment: staging
            replicaCount: 1
          
          prometheus:
            enabled: true
          EOF
      
      - name: Deploy to Staging
        run: |
          helm upgrade --install aimpact-platform ./helm \
            --namespace aimpact \
            --create-namespace \
            --values helm/values-staging.yaml \
            --atomic \
            --timeout 5m
      
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/aimpact-backend -n aimpact
          kubectl rollout status deployment/aimpact-voice -n aimpact
          kubectl rollout status deployment/aimpact-workflow-engine -n aimpact
          kubectl rollout status deployment/aimpact-auth -n aimpact

  deploy-production:
    name: Deploy to Production
    needs: prepare
    if: needs.prepare.outputs.environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.aimpact.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          context: production-cluster
      
      - name: Update Helm values
        run: |
          # Create values file with dynamic image tags
          cat > helm/values-production.yaml << EOF
          images:
            backend: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ needs.prepare.outputs.version }}
            voice: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-voice:${{ needs.prepare.outputs.version }}
            workflowEngine: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-workflow-engine:${{ needs.prepare.outputs.version }}
            auth: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:${{ needs.prepare.outputs.version }}
          
          deployment:
            environment: production
            replicaCount: 3
          
          prometheus:
            enabled: true
          
          resources:
            backend:
              requests:
                cpu: 500m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 1Gi
            voice:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: 2000m
                memory: 2Gi
          EOF
      
      - name: Deploy to Production
        run: |
          helm upgrade --install aimpact-platform ./helm \
            --namespace aimpact \
            --create-namespace \
            --values helm/values-production.yaml \
            --atomic \
            --timeout 10m
      
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/aimpact-backend -n aimpact
          kubectl rollout status deployment/aimpact-voice -n aimpact
          kubectl rollout status deployment/aimpact-workflow-engine -n aimpact
          kubectl rollout status deployment/aimpact-auth -n aimpact
      
      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Production Deployment ${{ job.status == 'success' && 'Successful! ✅' || 'Failed! ❌' }}
          SLACK_MESSAGE: |
            Environment: Production
            Version: ${{ needs.prepare.outputs.version }}
            Deployed by: ${{ github.actor }}

