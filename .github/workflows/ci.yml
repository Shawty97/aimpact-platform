name: CI - Build, Test, and Scan

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/aimpact

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, voice, workflow-engine, auth]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f ${{ matrix.service }}/requirements.txt ]; then
            pip install -r ${{ matrix.service }}/requirements.txt
          fi
          pip install pytest pytest-cov flake8
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 ${{ matrix.service }} --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 ${{ matrix.service }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Test with pytest
        run: |
          if [ -d ${{ matrix.service }}/tests ]; then
            python -m pytest ${{ matrix.service }}/tests --cov=${{ matrix.service }} --cov-report=xml
          else
            echo "No tests found for ${{ matrix.service }}"
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false

  build:
    name: Build and Scan Docker Images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        include:
          - service: backend
            dockerfile: ./Dockerfile
            context: .
          - service: voice
            dockerfile: ./backend/voice/Dockerfile
            context: .
          - service: workflow-engine
            dockerfile: ./backend/workflow_engine/Dockerfile
            context: .
          - service: auth
            dockerfile: ./backend/auth/Dockerfile
            context: .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Generate Docker metadata for tagging
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=sha,prefix=${{ matrix.service }}-
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      # Run vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy-${{ matrix.service }}
      
      # Build and push the Docker image
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
      
      # Scan for secrets in the repository
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          report_format: sarif
          report_path: gitleaks-report.sarif
      
      - name: Upload gitleaks report
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-report.sarif
          category: gitleaks-${{ matrix.service }}

  # Create summary job
  summary:
    name: CI Summary
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check previous job status
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Some jobs have failed!"
          exit 1
      
      - name: Success
        run: |
          echo "✅ All jobs have passed successfully!"
          echo "The following images are ready to be deployed:"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:sha-${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-voice:sha-${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-workflow-engine:sha-${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-auth:sha-${{ github.sha }}"

