name: Authentication Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/auth/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/auth/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auth-service
  WORKING_DIRECTORY: services/auth

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi
          pip install black isort flake8 mypy
      
      - name: Check code formatting with Black
        run: black --check .
      
      - name: Check imports with isort
        run: isort --check-only --profile black .
      
      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Check types with mypy
        run: mypy --ignore-missing-imports .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Bandit security check
        run: bandit -r src -c pyproject.toml
      
      - name: Check dependencies for vulnerabilities
        run: safety check -r requirements.txt
      
      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        env:
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: auth_test_db
          JWT_SECRET_KEY: test_secret_key
          ENVIRONMENT: testing
        run: |
          pytest --cov=src --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage.xml

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            latest
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Kubernetes configuration
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Set image in Kubernetes manifests
        run: |
          # Replace the image in the deployment manifest
          sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' ${{ env.WORKING_DIRECTORY }}/k8s/staging/deployment.yaml
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ${{ env.WORKING_DIRECTORY }}/k8s/staging/
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/auth-service -n aimpact-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Kubernetes configuration
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Set image in Kubernetes manifests
        run: |
          # Replace the image in the deployment manifest
          sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' ${{ env.WORKING_DIRECTORY }}/k8s/production/deployment.yaml
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ${{ env.WORKING_DIRECTORY }}/k8s/production/
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/auth-service -n aimpact-production
      
      - name: Run database migrations
        run: |
          # Create a temporary pod to run the migrations
          kubectl run auth-migrations --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n aimpact-production --restart=Never --rm -i -- alembic upgrade head

